{"version":3,"sources":["index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","logger2","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","canProcess","res","id","logSuccess","logError","warn","amount","catch"],"mappings":";AAIA,MAAMA,EAAQC,GAEL,IAAIC,QAAQC,IACjBC,WAAW,IAAMD,EAAQF,GAAKA,KAI5BI,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAIjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAUnBC,EAAkB,CAACC,EAAUC,KAC3BC,MAAAA,EAAeF,EAASG,IAAIC,GAChCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAGxDhB,OAAAA,QAAQC,QAAQa,IAGnBG,EAAUH,GAAgBT,QAAQa,MAAMJ,GAW9CH,EAAgBH,EAAO,SAASD,KAAKU,GACrCN,EAAgBH,EAAO,OAAOD,KAAKU,GAInC,MAAME,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAiBhDK,EAAkBC,IAChB5B,MAAAA,EAAQqB,EAA0B,IAAK,KAEtC,OAAA,IAAInB,QAAQ,CAACC,EAAS0B,KAC3BzB,WAAW,KAGL0B,GAFeN,KAAKE,SAAW,GAEnB,CACVK,IAAAA,EAAM,CAACH,EAAYI,GAAIhC,GAC3BG,EAAQ4B,QAERF,EAAOD,EAAYI,KAEpBhC,MAIDiC,EAAa,EAAED,EAAI1B,MACvBC,QAAQC,mBAAmBwB,kBAAmB1B,QAG1C4B,EAAWF,IACfzB,QAAQ4B,qCAAqCH,+BAa/CL,EAAgB,CAAEK,GAAI,GAAII,OAAQ,MAAO3B,KAAKwB,GAAYI,MAAMH,GAChEP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,MAAO3B,KAAKwB,GAAYI,MAAMH,GAChEP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,KAAM3B,KAAKwB,GAAYI,MAAMH,GAC/DP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,MAAO3B,KAAKwB,GAAYI,MAAMH","file":"src.d3b07e6f.js","sourceRoot":"../src","sourcesContent":["// import './sass/main.scss';\n\n//======== ЗАДАНИЕ №1 ========\n\nconst delay = ms => {\n  // Твой код\n  return new Promise(resolve => {\n    setTimeout(() => resolve(ms), ms);\n  });\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n\n//======== ЗАДАНИЕ №2 ========\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\n// const toggleUserState = (allUsers, userName, callback) => {\n//   const updatedUsers = allUsers.map(user =>\n//     user.name === userName ? { ...user, active: !user.active } : user,\n//   );\n//   callback(updatedUsers);\n// };\n\nconst toggleUserState = (allUsers, userName) => {\n  const updatedUsers = allUsers.map(user =>\n    user.name === userName ? { ...user, active: !user.active } : user,\n  );\n\n  return Promise.resolve(updatedUsers);\n};\n\nconst logger2 = updatedUsers => console.table(updatedUsers);\n\n/*\n * Сейчас работает так\n */\n// toggleUserState(users, 'Mango', logger);\n// toggleUserState(users, 'Lux', logger);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger2);\ntoggleUserState(users, 'Lux').then(logger2);\n\n//======== ЗАДАНИЕ №3 ========\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\n// const makeTransaction = (transaction, onSuccess, onError) => {\n//   const delay = randomIntegerFromInterval(200, 500);\n\n//   setTimeout(() => {\n//     const canProcess = Math.random() > 0.3;\n\n//     if (canProcess) {\n//       onSuccess(transaction.id, delay);\n//     } else {\n//       onError(transaction.id);\n//     }\n//   }, delay);\n// };\n\nconst makeTransaction = transaction => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        let res = [transaction.id, delay];\n        resolve(res);\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = ([id, time]) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n"]}